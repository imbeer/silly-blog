/**
 *
 *  Image.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Image.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::blog;

const std::string Image::Cols::_image_id = "\"image_id\"";
const std::string Image::Cols::_post_id = "\"post_id\"";
const std::string Image::Cols::_url = "\"url\"";
const std::string Image::primaryKeyName = "image_id";
const bool Image::hasPrimaryKey = true;
const std::string Image::tableName = "\"image\"";

const std::vector<typename Image::MetaData> Image::metaData_={
{"image_id","int32_t","integer",4,1,1,1},
{"post_id","int32_t","integer",4,0,0,0},
{"url","std::string","character varying",2048,0,0,1}
};
const std::string &Image::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Image::Image(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["image_id"].isNull())
        {
            imageId_=std::make_shared<int32_t>(r["image_id"].as<int32_t>());
        }
        if(!r["post_id"].isNull())
        {
            postId_=std::make_shared<int32_t>(r["post_id"].as<int32_t>());
        }
        if(!r["url"].isNull())
        {
            url_=std::make_shared<std::string>(r["url"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            imageId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            postId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            url_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Image::Image(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            imageId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            postId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            url_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

Image::Image(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("image_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["image_id"].isNull())
        {
            imageId_=std::make_shared<int32_t>((int32_t)pJson["image_id"].asInt64());
        }
    }
    if(pJson.isMember("post_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["post_id"].isNull())
        {
            postId_=std::make_shared<int32_t>((int32_t)pJson["post_id"].asInt64());
        }
    }
    if(pJson.isMember("url"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["url"].isNull())
        {
            url_=std::make_shared<std::string>(pJson["url"].asString());
        }
    }
}

void Image::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            imageId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            postId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            url_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void Image::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("image_id"))
    {
        if(!pJson["image_id"].isNull())
        {
            imageId_=std::make_shared<int32_t>((int32_t)pJson["image_id"].asInt64());
        }
    }
    if(pJson.isMember("post_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["post_id"].isNull())
        {
            postId_=std::make_shared<int32_t>((int32_t)pJson["post_id"].asInt64());
        }
    }
    if(pJson.isMember("url"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["url"].isNull())
        {
            url_=std::make_shared<std::string>(pJson["url"].asString());
        }
    }
}

const int32_t &Image::getValueOfImageId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(imageId_)
        return *imageId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Image::getImageId() const noexcept
{
    return imageId_;
}
void Image::setImageId(const int32_t &pImageId) noexcept
{
    imageId_ = std::make_shared<int32_t>(pImageId);
    dirtyFlag_[0] = true;
}
const typename Image::PrimaryKeyType & Image::getPrimaryKey() const
{
    assert(imageId_);
    return *imageId_;
}

const int32_t &Image::getValueOfPostId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(postId_)
        return *postId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Image::getPostId() const noexcept
{
    return postId_;
}
void Image::setPostId(const int32_t &pPostId) noexcept
{
    postId_ = std::make_shared<int32_t>(pPostId);
    dirtyFlag_[1] = true;
}
void Image::setPostIdToNull() noexcept
{
    postId_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Image::getValueOfUrl() const noexcept
{
    static const std::string defaultValue = std::string();
    if(url_)
        return *url_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Image::getUrl() const noexcept
{
    return url_;
}
void Image::setUrl(const std::string &pUrl) noexcept
{
    url_ = std::make_shared<std::string>(pUrl);
    dirtyFlag_[2] = true;
}
void Image::setUrl(std::string &&pUrl) noexcept
{
    url_ = std::make_shared<std::string>(std::move(pUrl));
    dirtyFlag_[2] = true;
}

void Image::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Image::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "post_id",
        "url"
    };
    return inCols;
}

void Image::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getPostId())
        {
            binder << getValueOfPostId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Image::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void Image::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getPostId())
        {
            binder << getValueOfPostId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Image::toJson() const
{
    Json::Value ret;
    if(getImageId())
    {
        ret["image_id"]=getValueOfImageId();
    }
    else
    {
        ret["image_id"]=Json::Value();
    }
    if(getPostId())
    {
        ret["post_id"]=getValueOfPostId();
    }
    else
    {
        ret["post_id"]=Json::Value();
    }
    if(getUrl())
    {
        ret["url"]=getValueOfUrl();
    }
    else
    {
        ret["url"]=Json::Value();
    }
    return ret;
}

Json::Value Image::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getImageId())
            {
                ret[pMasqueradingVector[0]]=getValueOfImageId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getPostId())
            {
                ret[pMasqueradingVector[1]]=getValueOfPostId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUrl())
            {
                ret[pMasqueradingVector[2]]=getValueOfUrl();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getImageId())
    {
        ret["image_id"]=getValueOfImageId();
    }
    else
    {
        ret["image_id"]=Json::Value();
    }
    if(getPostId())
    {
        ret["post_id"]=getValueOfPostId();
    }
    else
    {
        ret["post_id"]=Json::Value();
    }
    if(getUrl())
    {
        ret["url"]=getValueOfUrl();
    }
    else
    {
        ret["url"]=Json::Value();
    }
    return ret;
}

bool Image::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("image_id"))
    {
        if(!validJsonOfField(0, "image_id", pJson["image_id"], err, true))
            return false;
    }
    if(pJson.isMember("post_id"))
    {
        if(!validJsonOfField(1, "post_id", pJson["post_id"], err, true))
            return false;
    }
    if(pJson.isMember("url"))
    {
        if(!validJsonOfField(2, "url", pJson["url"], err, true))
            return false;
    }
    else
    {
        err="The url column cannot be null";
        return false;
    }
    return true;
}
bool Image::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Image::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("image_id"))
    {
        if(!validJsonOfField(0, "image_id", pJson["image_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("post_id"))
    {
        if(!validJsonOfField(1, "post_id", pJson["post_id"], err, false))
            return false;
    }
    if(pJson.isMember("url"))
    {
        if(!validJsonOfField(2, "url", pJson["url"], err, false))
            return false;
    }
    return true;
}
bool Image::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Image::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 2048)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2048)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
